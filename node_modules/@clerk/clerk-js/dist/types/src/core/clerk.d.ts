import type { ActiveSessionResource, AuthenticateWithMetamaskParams, BeforeEmitCallback, Clerk as ClerkInterface, ClerkOptions, ClientResource, CreateOrganizationParams, CreateOrganizationProps, DomainOrProxyUrl, EnvironmentJSON, EnvironmentResource, HandleMagicLinkVerificationParams, HandleOAuthCallbackParams, ListenerCallback, OrganizationInvitationResource, OrganizationMembershipResource, OrganizationProfileProps, OrganizationResource, OrganizationSwitcherProps, RedirectOptions, SetActiveParams, SignInProps, SignOut, SignUpProps, UnsubscribeCallback, UserButtonProps, UserProfileProps, UserResource } from '@clerk/types';
import type { ComponentControls, MountComponentRenderer } from '../ui';
import type { FapiClient, FapiRequestCallback } from './fapiClient';
import { Organization, OrganizationMembership } from './resources/internal';
export type ClerkCoreBroadcastChannelEvent = {
    type: 'signout';
};
declare global {
    interface Window {
        Clerk?: Clerk;
        __clerk_frontend_api?: string;
        __clerk_publishable_key?: string;
        __clerk_proxy_url?: ClerkInterface['proxyUrl'];
        __clerk_domain?: ClerkInterface['domain'];
    }
}
export default class Clerk implements ClerkInterface {
    #private;
    static mountComponentRenderer?: MountComponentRenderer;
    static version: string;
    client?: ClientResource;
    session?: ActiveSessionResource | null;
    organization?: OrganizationResource | null;
    user?: UserResource | null;
    readonly frontendApi: string;
    readonly publishableKey?: string;
    readonly proxyUrl?: ClerkInterface['proxyUrl'];
    readonly domain?: ClerkInterface['domain'];
    get version(): string;
    get loaded(): boolean;
    get isSatellite(): boolean;
    constructor(key: string, options?: DomainOrProxyUrl);
    getFapiClient: () => FapiClient;
    isReady: () => boolean;
    load: (options?: Omit<ClerkOptions, 'isSatellite'>) => Promise<void>;
    signOut: SignOut;
    openSignIn: (props?: SignInProps) => void;
    closeSignIn: () => void;
    openSignUp: (props?: SignInProps) => void;
    closeSignUp: () => void;
    openUserProfile: (props?: UserProfileProps) => void;
    closeUserProfile: () => void;
    openOrganizationProfile: (props?: OrganizationProfileProps) => void;
    closeOrganizationProfile: () => void;
    openCreateOrganization: (props?: CreateOrganizationProps) => void;
    closeCreateOrganization: () => void;
    mountSignIn: (node: HTMLDivElement, props?: SignInProps) => void;
    unmountSignIn: (node: HTMLDivElement) => void;
    mountSignUp: (node: HTMLDivElement, props?: SignUpProps) => void;
    unmountSignUp: (node: HTMLDivElement) => void;
    mountUserProfile: (node: HTMLDivElement, props?: UserProfileProps) => void;
    unmountUserProfile: (node: HTMLDivElement) => void;
    mountOrganizationProfile: (node: HTMLDivElement, props?: OrganizationProfileProps) => void;
    unmountOrganizationProfile: (node: HTMLDivElement) => void;
    mountCreateOrganization: (node: HTMLDivElement, props?: CreateOrganizationProps) => void;
    unmountCreateOrganization: (node: HTMLDivElement) => void;
    mountOrganizationSwitcher: (node: HTMLDivElement, props?: OrganizationSwitcherProps) => void;
    unmountOrganizationSwitcher: (node: HTMLDivElement) => void;
    mountUserButton: (node: HTMLDivElement, props?: UserButtonProps) => void;
    unmountUserButton: (node: HTMLDivElement) => void;
    /**
     * `setActive` can be used to set the active session and/or organization.
     * It will eventually replace `setSession`.
     *
     * @experimental
     */
    setActive: ({ session, organization, beforeEmit }: SetActiveParams) => Promise<void>;
    setSession: (session: ActiveSessionResource | string | null, beforeEmit?: BeforeEmitCallback) => Promise<void>;
    addListener: (listener: ListenerCallback) => UnsubscribeCallback;
    navigate: (to: string | undefined) => Promise<unknown>;
    buildUrlWithAuth(to: string): string;
    buildSignInUrl(options?: RedirectOptions): string;
    buildSignUpUrl(options?: RedirectOptions): string;
    buildUserProfileUrl(): string;
    buildHomeUrl(): string;
    buildCreateOrganizationUrl(): string;
    buildOrganizationProfileUrl(): string;
    redirectWithAuth: (to: string) => Promise<unknown>;
    redirectToSignIn: (options?: RedirectOptions) => Promise<unknown>;
    redirectToSignUp: (options?: RedirectOptions) => Promise<unknown>;
    redirectToUserProfile: () => Promise<unknown>;
    redirectToCreateOrganization: () => Promise<unknown>;
    redirectToOrganizationProfile: () => Promise<unknown>;
    redirectToHome: () => Promise<unknown>;
    handleMagicLinkVerification: (params: HandleMagicLinkVerificationParams, customNavigate?: ((to: string) => Promise<unknown>) | undefined) => Promise<unknown>;
    handleRedirectCallback: (params?: HandleOAuthCallbackParams, customNavigate?: ((to: string) => Promise<unknown>) | undefined) => Promise<unknown>;
    handleUnauthenticated: (opts?: {
        broadcast: boolean;
    }) => Promise<unknown>;
    authenticateWithMetamask: ({ redirectUrl, signUpContinueUrl, customNavigate, }?: AuthenticateWithMetamaskParams) => Promise<void>;
    createOrganization: ({ name, slug }: CreateOrganizationParams) => Promise<OrganizationResource>;
    getOrganizationMemberships: () => Promise<OrganizationMembership[]>;
    getOrganization: (organizationId: string) => Promise<Organization | undefined>;
    updateClient: (newClient: ClientResource) => void;
    __unstable__invitationUpdate(invitation: OrganizationInvitationResource): void;
    __unstable__membershipUpdate(membership: OrganizationMembershipResource): void;
    get __unstable__environment(): EnvironmentResource | null | undefined;
    __unstable__setEnvironment: (env: EnvironmentJSON) => Promise<void>;
    __unstable__onBeforeRequest: (callback: FapiRequestCallback<any>) => void;
    __unstable__onAfterResponse: (callback: FapiRequestCallback<any>) => void;
    __unstable__updateProps: (props: any) => void;
    assertComponentsReady(components: ComponentControls | null | undefined): asserts components is ComponentControls;
}
