import type { Appearance, Clerk, ClerkOptions, EnvironmentResource, OrganizationProfileProps, SignInProps, SignUpProps, UserProfileProps } from '@clerk/types';
import React from 'react';
import type { AvailableComponentProps } from './types';
export type ComponentControls = {
    mountComponent: (params: {
        appearanceKey: Uncapitalize<AvailableComponentNames>;
        name: AvailableComponentNames;
        node: HTMLDivElement;
        props?: AvailableComponentProps;
    }) => void;
    unmountComponent: (params: {
        node: HTMLDivElement;
    }) => void;
    updateProps: (params: {
        appearance?: Appearance | undefined;
        options?: ClerkOptions | undefined;
        node?: HTMLDivElement;
        props?: unknown;
    }) => void;
    openModal: <T extends 'signIn' | 'signUp' | 'userProfile' | 'organizationProfile' | 'createOrganization'>(modal: T, props: T extends 'signIn' ? SignInProps : T extends 'signUp' ? SignUpProps : UserProfileProps) => void;
    closeModal: (modal: 'signIn' | 'signUp' | 'userProfile' | 'organizationProfile' | 'createOrganization') => void;
};
declare const AvailableComponents: {
    SignIn: React.ComponentType<SignInProps>;
    SignUp: React.ComponentType<SignUpProps>;
    UserButton: React.ComponentType<unknown>;
    UserProfile: (props: UserProfileProps) => JSX.Element | null;
    OrganizationSwitcher: React.ComponentType<unknown>;
    OrganizationProfile: (props: OrganizationProfileProps) => JSX.Element | null;
    CreateOrganization: React.ComponentType<unknown>;
};
type AvailableComponentNames = keyof typeof AvailableComponents;
export declare const mountComponentRenderer: (clerk: Clerk, environment: EnvironmentResource, options: ClerkOptions) => Promise<ComponentControls>;
export type MountComponentRenderer = typeof mountComponentRenderer;
export {};
