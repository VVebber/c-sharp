import type { ClerkAPIError } from '@clerk/types';
import type { HTMLInputTypeAttribute } from 'react';
import React from 'react';
import type { LocalizationKey } from '../localization';
type SelectOption = {
    value: string;
    label?: string;
};
type Options = {
    isRequired?: boolean;
    label: string | LocalizationKey;
    placeholder?: string | LocalizationKey;
    type?: HTMLInputTypeAttribute;
    options?: SelectOption[];
};
type FieldStateProps<Id> = {
    id: Id;
    name: Id;
    value: string;
    onChange: React.ChangeEventHandler<HTMLInputElement>;
    errorText: string | undefined;
} & Options;
export type FormControlState<Id = string> = FieldStateProps<Id> & {
    setError: (error: string | ClerkAPIError | undefined) => void;
    setValue: (val: string | undefined) => void;
    props: FieldStateProps<Id>;
};
export declare const useFormControl: <Id extends string>(id: Id, initialState: string, opts?: Options) => FormControlState<Id>;
type FormControlStateLike = Pick<FormControlState, 'id' | 'value'>;
export declare const buildRequest: (fieldStates: Array<FormControlStateLike>) => Record<string, any>;
export {};
