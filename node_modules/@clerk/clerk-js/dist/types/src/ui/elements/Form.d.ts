import type { FieldId } from '@clerk/types';
import React from 'react';
import { Button, Flex, Form as FormPrim } from '../customizables';
import type { PropsOfComponent } from '../styledSystem';
type FormProps = PropsOfComponent<typeof FormPrim>;
export declare const Form: {
    Root: (props: FormProps) => JSX.Element;
    ControlRow: (props: Omit<PropsOfComponent<typeof Flex>, 'elementId'> & {
        elementId?: FieldId;
    }) => import("@emotion/react/jsx-runtime").JSX.Element;
    Control: (props: Omit<Pick<React.ClassAttributes<HTMLInputElement> & React.InputHTMLAttributes<HTMLInputElement> & {
        css?: import("../styledSystem/types").ThemableCssProp;
    } & {} & {
        isDisabled?: boolean | undefined;
        hasError?: boolean | undefined;
        focusRing?: boolean | undefined;
    } & Partial<Record<"isRequired", boolean>>, "key" | "isRequired" | "css" | keyof React.InputHTMLAttributes<HTMLInputElement> | keyof {
        isDisabled?: boolean | undefined;
        hasError?: boolean | undefined;
        focusRing?: boolean | undefined;
    }> & React.RefAttributes<HTMLInputElement> & {
        elementDescriptor?: import("../customizables/elementDescriptors").ElementDescriptor<any> | (import("../customizables/elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
        elementId?: import("../customizables/elementDescriptors").ElementId<string> | undefined;
        css?: undefined;
        sx?: import("../styledSystem/types").ThemableCssProp;
    }, "label" | "placeholder"> & {
        id: FieldId;
        isRequired?: boolean | undefined;
        isOptional?: boolean | undefined;
        errorText?: string | undefined;
        onActionClicked?: React.MouseEventHandler<Element> | undefined;
        isDisabled?: boolean | undefined;
        label: string | import("../customizables").LocalizationKey;
        placeholder?: string | import("../customizables").LocalizationKey | undefined;
        actionLabel?: string | import("../customizables").LocalizationKey | undefined;
    }) => import("@emotion/react/jsx-runtime").JSX.Element;
    SubmitButton: (props: PropsOfComponent<typeof Button>) => import("@emotion/react/jsx-runtime").JSX.Element;
    ResetButton: (props: PropsOfComponent<typeof Button>) => import("@emotion/react/jsx-runtime").JSX.Element;
};
export {};
