/// <reference types="react" />
import * as Primitives from '../primitives';
export * from './Flow';
export { AppearanceProvider, useAppearance } from './AppearanceContext';
export { descriptors } from './elementDescriptors';
export { localizationKeys, useLocalizations } from '../localization';
export type { LocalizationKey } from '../localization';
export { generateFlowPartClassname } from './classGeneration';
export declare const Box: import("react").FunctionComponent<Pick<Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {}, "key" | "as" | "isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive" | keyof import("react").HTMLAttributes<HTMLDivElement> | "css"> & import("react").RefAttributes<HTMLDivElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Flex: import("react").FunctionComponent<Pick<Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "start" | "end" | "center" | "baseline" | "stretch" | undefined;
    justify?: "start" | "end" | "center" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 2 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;
    center?: boolean | undefined;
}, "key" | "as" | "direction" | "gap" | "isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "center" | keyof import("react").HTMLAttributes<HTMLDivElement> | "css" | "align" | "justify" | "wrap"> & import("react").RefAttributes<HTMLDivElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Col: import("react").FunctionComponent<Pick<Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "start" | "end" | "center" | "baseline" | "stretch" | undefined;
    justify?: "start" | "end" | "center" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 2 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;
    center?: boolean | undefined;
}, "key" | "as" | "direction" | "gap" | "isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "center" | keyof import("react").HTMLAttributes<HTMLDivElement> | "css" | "align" | "justify" | "wrap"> & import("react").RefAttributes<HTMLDivElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Grid: import("react").FunctionComponent<Pick<Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    align?: "start" | "end" | "center" | "baseline" | "stretch" | undefined;
    justify?: "start" | "end" | "center" | "stretch" | "between" | "around" | undefined;
    columns?: 2 | 1 | 3 | 4 | 6 | undefined;
    gap?: 2 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;
}, "key" | "as" | "columns" | "gap" | "isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive" | keyof import("react").HTMLAttributes<HTMLDivElement> | "css" | "align" | "justify"> & import("react").RefAttributes<HTMLDivElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Button: import("react").FunctionComponent<Pick<import("react").ClassAttributes<HTMLButtonElement> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    isLoading?: boolean | undefined;
    loadingText?: string | undefined;
    isDisabled?: boolean | undefined;
    isActive?: boolean | undefined;
    hoverAsFocus?: boolean | undefined;
} & {
    textVariant?: "buttonRegularRegular" | "headingRegularRegular" | "buttonExtraSmallBold" | "buttonSmallRegular" | "buttonRegularMedium" | "extraSmallRegular" | "smallRegular" | "smallMedium" | "smallBold" | "regularRegular" | "regularMedium" | "largeMedium" | "largeBold" | "xlargeMedium" | "xxlargeMedium" | undefined;
    size?: "md" | "xs" | "iconLg" | undefined;
    colorScheme?: "primary" | "danger" | "neutral" | undefined;
    variant?: "outline" | "link" | "solid" | "ghost" | "icon" | "ghostIcon" | "roundWrapper" | undefined;
    block?: boolean | undefined;
    focusRing?: boolean | undefined;
}, "key" | "size" | "colorScheme" | "block" | "focusRing" | "isDisabled" | "isLoading" | "isActive" | "css" | "textVariant" | "variant" | keyof import("react").ButtonHTMLAttributes<HTMLButtonElement> | "loadingText" | "hoverAsFocus"> & import("react").RefAttributes<HTMLButtonElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const SimpleButton: import("react").FunctionComponent<Pick<import("react").ClassAttributes<HTMLButtonElement> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    isLoading?: boolean | undefined;
    loadingText?: string | undefined;
    isDisabled?: boolean | undefined;
    isActive?: boolean | undefined;
    hoverAsFocus?: boolean | undefined;
} & {
    textVariant?: "buttonRegularRegular" | "headingRegularRegular" | "buttonExtraSmallBold" | "buttonSmallRegular" | "buttonRegularMedium" | "extraSmallRegular" | "smallRegular" | "smallMedium" | "smallBold" | "regularRegular" | "regularMedium" | "largeMedium" | "largeBold" | "xlargeMedium" | "xxlargeMedium" | undefined;
    size?: "md" | "xs" | "iconLg" | undefined;
    colorScheme?: "primary" | "danger" | "neutral" | undefined;
    variant?: "outline" | "link" | "solid" | "ghost" | "icon" | "ghostIcon" | "roundWrapper" | undefined;
    block?: boolean | undefined;
    focusRing?: boolean | undefined;
}, "key" | "size" | "colorScheme" | "block" | "focusRing" | "isDisabled" | "isLoading" | "isActive" | "css" | "textVariant" | "variant" | keyof import("react").ButtonHTMLAttributes<HTMLButtonElement> | "loadingText" | "hoverAsFocus"> & import("react").RefAttributes<HTMLButtonElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Heading: import("react").FunctionComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    textVariant?: "buttonRegularRegular" | "headingRegularRegular" | "buttonExtraSmallBold" | "buttonSmallRegular" | "buttonRegularMedium" | "extraSmallRegular" | "smallRegular" | "smallMedium" | "smallBold" | "regularRegular" | "regularMedium" | "largeMedium" | "largeBold" | "xlargeMedium" | "xxlargeMedium" | undefined;
    as?: "h1" | undefined;
} & {
    as?: "h1" | undefined;
} & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Link: import("react").FunctionComponent<import("react").ClassAttributes<HTMLAnchorElement> & import("react").AnchorHTMLAttributes<HTMLAnchorElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    isExternal?: boolean | undefined;
    isDisabled?: boolean | undefined;
} & {
    variant?: "buttonRegularRegular" | "headingRegularRegular" | "buttonExtraSmallBold" | "buttonSmallRegular" | "buttonRegularMedium" | "extraSmallRegular" | "smallRegular" | "smallMedium" | "smallBold" | "regularRegular" | "regularMedium" | "largeMedium" | "largeBold" | "xlargeMedium" | "xxlargeMedium" | undefined;
    size?: "sm" | "xs" | "xss" | undefined;
    colorScheme?: "primary" | "inherit" | "danger" | "neutral" | undefined;
} & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Text: import("react").FunctionComponent<import("react").ClassAttributes<HTMLParagraphElement> & import("react").HTMLAttributes<HTMLParagraphElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    isDisabled?: boolean | undefined;
} & {
    variant?: "buttonRegularRegular" | "headingRegularRegular" | "buttonExtraSmallBold" | "buttonSmallRegular" | "buttonRegularMedium" | "extraSmallRegular" | "smallRegular" | "smallMedium" | "smallBold" | "regularRegular" | "regularMedium" | "largeMedium" | "largeBold" | "xlargeMedium" | "xxlargeMedium" | undefined;
    size?: "sm" | "xs" | "xss" | undefined;
    colorScheme?: "primary" | "inherit" | "danger" | "neutral" | "onPrimaryBg" | undefined;
    truncate?: boolean | undefined;
} & {
    as?: "code" | "p" | "a" | "li" | "label" | "div" | "span" | undefined;
} & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Image: import("react").FunctionComponent<Pick<Primitives.ImageProps, "key" | "xDescriptors" | "size" | "isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "css" | keyof import("react").ImgHTMLAttributes<HTMLImageElement>> & import("react").RefAttributes<HTMLImageElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Alert: import("react").FunctionComponent<Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "start" | "end" | "center" | "baseline" | "stretch" | undefined;
    justify?: "start" | "end" | "center" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 2 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;
    center?: boolean | undefined;
} & {} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const AlertIcon: import("react").FunctionComponent<{
    variant: "danger" | "warning";
} & {
    colorScheme?: "primary" | "danger" | "warning" | "success" | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Input: import("react").FunctionComponent<Pick<import("react").ClassAttributes<HTMLInputElement> & import("react").InputHTMLAttributes<HTMLInputElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {} & {
    isDisabled?: boolean | undefined;
    hasError?: boolean | undefined;
    focusRing?: boolean | undefined;
} & Partial<Record<"isRequired", boolean>>, "key" | "isRequired" | "css" | keyof import("react").InputHTMLAttributes<HTMLInputElement> | keyof {
    isDisabled?: boolean | undefined;
    hasError?: boolean | undefined;
    focusRing?: boolean | undefined;
}> & import("react").RefAttributes<HTMLInputElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const FormControl: import("react").FunctionComponent<import("../primitives/hooks").FormControlProps & {
    children?: import("react").ReactNode;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const FormLabel: import("react").FunctionComponent<import("react").ClassAttributes<HTMLLabelElement> & import("react").LabelHTMLAttributes<HTMLLabelElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {} & Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & {
    children?: import("react").ReactNode;
} & Partial<Record<"isRequired", boolean>> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const FormErrorText: import("react").FunctionComponent<{} & {
    children?: import("react").ReactNode;
} & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Form: import("react").FunctionComponent<Pick<Primitives.FormProps, "title" | "name" | "role" | "key" | "method" | "action" | "prefix" | "id" | "as" | "is" | "nonce" | "color" | "direction" | "translate" | "gap" | "security" | "children" | "className" | "slot" | "style" | "isOpen" | "hidden" | "onChange" | "placeholder" | "target" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "center" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "unselectable" | "inputMode" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "autoComplete" | "align" | "acceptCharset" | "encType" | "justify" | "wrap" | "rel" | "noValidate"> & import("react").RefAttributes<HTMLFormElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Icon: import("react").FunctionComponent<{
    size?: "md" | "sm" | "lg" | undefined;
    colorScheme?: "danger" | "warning" | "neutral" | undefined;
} & {
    icon: import("react").ComponentType<{}>;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Spinner: import("react").FunctionComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    colorScheme?: "primary" | "neutral" | undefined;
    thickness?: "md" | "sm" | undefined;
    size?: "md" | "sm" | "lg" | "xl" | undefined;
    speed?: "normal" | "slow" | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Badge: import("react").FunctionComponent<Pick<Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "start" | "end" | "center" | "baseline" | "stretch" | undefined;
    justify?: "start" | "end" | "center" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 2 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;
    center?: boolean | undefined;
}, "key" | "as" | "direction" | "gap" | "isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "center" | keyof import("react").HTMLAttributes<HTMLDivElement> | "css" | "align" | "justify" | "wrap"> & import("react").RefAttributes<HTMLDivElement> & {
    textVariant?: "buttonRegularRegular" | "headingRegularRegular" | "buttonExtraSmallBold" | "buttonSmallRegular" | "buttonRegularMedium" | "extraSmallRegular" | "smallRegular" | "smallMedium" | "smallBold" | "regularRegular" | "regularMedium" | "largeMedium" | "largeBold" | "xlargeMedium" | "xxlargeMedium" | undefined;
    colorScheme?: "primary" | "danger" | "warning" | "success" | undefined;
} & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Table: import("react").FunctionComponent<Pick<import("react").ClassAttributes<HTMLTableElement> & import("react").TableHTMLAttributes<HTMLTableElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & Omit<Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {}, "as"> & {}, "title" | "role" | "key" | "width" | "prefix" | "id" | "is" | "nonce" | "color" | "translate" | "border" | "security" | "children" | "className" | "slot" | "style" | "summary" | "isOpen" | "hidden" | "onChange" | "placeholder" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "unselectable" | "inputMode" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "align" | "bgcolor" | "cellPadding" | "cellSpacing" | "frame" | "rules"> & import("react").RefAttributes<HTMLTableCellElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Thead: import("react").FunctionComponent<Pick<Primitives.TheadProps, "title" | "role" | "key" | "prefix" | "id" | "is" | "nonce" | "color" | "translate" | "security" | "children" | "className" | "slot" | "style" | "isOpen" | "hidden" | "onChange" | "placeholder" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "unselectable" | "inputMode" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css"> & import("react").RefAttributes<HTMLTableSectionElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Tbody: import("react").FunctionComponent<Pick<Primitives.TbodyProps, "title" | "role" | "key" | "prefix" | "id" | "is" | "nonce" | "color" | "translate" | "security" | "children" | "className" | "slot" | "style" | "isOpen" | "hidden" | "onChange" | "placeholder" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "unselectable" | "inputMode" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css"> & import("react").RefAttributes<HTMLTableSectionElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Tr: import("react").FunctionComponent<Pick<Primitives.TrProps, "title" | "role" | "key" | "prefix" | "id" | "is" | "nonce" | "color" | "translate" | "security" | "children" | "className" | "slot" | "style" | "isOpen" | "hidden" | "onChange" | "placeholder" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "unselectable" | "inputMode" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css"> & import("react").RefAttributes<HTMLTableCellElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Th: import("react").FunctionComponent<Pick<import("react").ClassAttributes<HTMLTableHeaderCellElement> & import("react").ThHTMLAttributes<HTMLTableHeaderCellElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & Omit<Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {}, "as"> & {}, "title" | "role" | "key" | "prefix" | "id" | "is" | "nonce" | "color" | "translate" | "security" | "children" | "className" | "abbr" | "slot" | "style" | "isOpen" | "hidden" | "onChange" | "placeholder" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "unselectable" | "inputMode" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "align" | "colSpan" | "headers" | "rowSpan" | "scope"> & import("react").RefAttributes<HTMLTableCellElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Td: import("react").FunctionComponent<Pick<import("react").ClassAttributes<HTMLTableDataCellElement> & import("react").TdHTMLAttributes<HTMLTableDataCellElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & Omit<Partial<Record<"isOpen" | "isDisabled" | "hasError" | "isLoading" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {}, "as"> & {}, "title" | "role" | "key" | "width" | "prefix" | "id" | "is" | "nonce" | "color" | "height" | "translate" | "security" | "children" | "className" | "abbr" | "slot" | "style" | "isOpen" | "hidden" | "onChange" | "placeholder" | "isDisabled" | "hasError" | "isLoading" | "isActive" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "lang" | "spellCheck" | "tabIndex" | "radioGroup" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "unselectable" | "inputMode" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "align" | "colSpan" | "headers" | "rowSpan" | "scope" | "valign"> & import("react").RefAttributes<HTMLTableCellElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor<any> | (import("./elementDescriptors").ElementDescriptor<any> | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId<string> | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
