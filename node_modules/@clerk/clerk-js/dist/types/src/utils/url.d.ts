import type { SignUpResource } from '@clerk/types';
declare global {
    export interface Window {
        tldts: {
            getDomain(hostname: string, { allowPrivateDomains }: {
                allowPrivateDomains: boolean;
            }): string;
        };
    }
}
export declare const DEV_OR_STAGING_SUFFIXES: string[];
export declare function isDevOrStagingUrl(url: string | URL): boolean;
export declare function isAccountsHostedPages(url?: string | URL): boolean;
export declare function getETLDPlusOne(hostname?: string): Promise<string>;
export declare function getAllETLDs(hostname?: string): string[];
interface BuildURLParams extends Partial<URL> {
    base?: string;
    hashPath?: string;
    hashSearch?: string;
}
interface BuildURLOptions<T> {
    skipOrigin?: boolean;
    stringify?: T;
}
/**
 *
 * buildURL(params: URLParams, options: BuildURLOptions): string
 *
 * Builds a URL safely by using the native URL() constructor. It can
 * also build a secondary path and search URL that lives inside the hash
 * of the main URL. For example:
 *
 * https://foo.com/bar?qux=42#/hash-bar?hash-qux=42
 *
 * References:
 * https://developer.mozilla.org/en-US/docs/Web/API/URL
 *
 * @param {URLParams} params
 * @param {BuildURLOptions} options
 * @returns {URL | string} Returns the URL href
 */
export declare function buildURL<B extends boolean>(params: BuildURLParams, options?: BuildURLOptions<B>): B extends true ? string : URL;
export declare function toURL(url: string | URL): URL;
/**
 *
 * stripOrigin(url: URL | string): string
 *
 * Strips the origin part of a URL and preserves path, search and hash is applicable
 *
 * References:
 * https://developer.mozilla.org/en-US/docs/Web/API/URL
 *
 * @param {URL | string} url
 * @returns {string} Returns the URL href without the origin
 */
export declare function stripOrigin(url: URL | string): string;
/**
 * trimTrailingSlash(path: string): string
 *
 * Strips the trailing slashes from a string
 *
 * @param {path} string
 * @returns {string} Returns the string without trailing slashes
 */
export declare const trimTrailingSlash: (path: string) => string;
export declare const appendAsQueryParams: (baseUrl: string | URL, urls?: Record<string, string | URL | null | undefined>) => string;
export declare const hasExternalAccountSignUpError: (signUp: SignUpResource) => boolean;
export declare function getSearchParameterFromHash({ hash, paramName, }: {
    hash?: string;
    paramName: string;
}): string | null;
export declare function setSearchParameterInHash({ hash, paramName, paramValue, }: {
    hash?: string;
    paramName: string;
    paramValue: string;
}): string;
export declare function removeSearchParameterFromHash({ hash, paramName, }: {
    hash?: string;
    paramName: string;
}): string;
export declare function isValidUrl(val: unknown, opts?: {
    includeRelativeUrls?: boolean;
}): val is string;
export declare function isDataUri(val?: string): val is string;
export declare function hasBannedProtocol(val: string | URL): boolean;
export declare const isClerkImage: (src?: string) => boolean;
export declare const generateSrc: ({ src, width }: {
    src?: string | undefined;
    width: number;
}) => string | undefined;
export declare const generateSrcSet: ({ src, width, xDescriptors, }: {
    src?: string | undefined;
    width: number;
    xDescriptors: number[];
}) => string;
export {};
